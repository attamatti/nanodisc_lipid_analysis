#!/usr/bin/env python

# plot nanodisc planarity data from exisiting data files generated by lpid_thickness_v3.py and MSP_planarity.py

import numpy as np
import sys
import matplotlib.pyplot as plt
import glob
#read files:


MSPxs = np.fromfile('plotfiles/msps_x.npy')
MSPys = np.fromfile('plotfiles/msps_y.npy')
msp1vals= np.fromfile('plotfiles/msp1_plan.npy')
msp2vals= np.fromfile('plotfiles/msp2_plan.npy')
msp1std= np.fromfile('plotfiles/stdmsp1_plan.npy')
msp2std= np.fromfile('plotfiles/stdmsp2_plan.npy')
#except:
#    sys.exit('files missing from the plotfiles/ directory')

msp1x = MSPxs[0:len(msp1vals)]
msp2x = MSPxs[len(msp1vals):]
msp1y = MSPys[0:len(msp1vals)]
msp2y = MSPys[len(msp1vals):]
draw_elementsx,draw_elementsy = [],[]
xee = glob.glob('plotfiles/elems_x_*.npy')
xee.sort()
for i in xee:
    vals= np.fromfile(i)
    draw_elementsx.append(vals)
    print('FOUND: {0}'.format(i))
yee = glob.glob('plotfiles/elems_y_*.npy')
yee.sort()
for i in yee:
    vals= np.fromfile(i)
    draw_elementsy.append(vals)
    print('FOUND: {0}'.format(i))
    
num_extra_elements = len(glob.glob('plotfiles/elems_x_*.npy'))

try:
    plmin = float(sys.argv[1])
    plmax = float(sys.argv[2])
    plinc = float(sys.argv[3])
    plstdmin = float(sys.argv[4])
    plstdmax = float(sys.argv[5])
    plstdinc = float(sys.argv[6])

except:
    sys.exit('''\nUSAGE: plot_nanodisc_planarity.py <min> <max> <increment> <std min> <std max> <std increment>
             values analysis:
                    MINDEV\tMAXDEV\tSTDMIN\tSTDMAX
             MSP1   {0:.1f}\t{1:.1f}\t{2:.1f}\t{3:.1f}    
             MSP2   {4:.1f}\t{5:.1f}\t{6:.1f}\t{7:.1f}     '''.format(np.min(msp1vals),np.max(msp1vals),np.min(msp1std),np.max(msp1std),np.min(msp2vals),np.max(msp2vals),np.min(msp2std),np.max(msp2std)))

def makeplot(x,y,v,title,valmin,valmax,vinc):
        
    #plot data and colorbar
    h = plt.scatter(x,y,c=v,vmin=valmin,vmax=valmax,cmap='coolwarm')
    #plt.colorbar(h)
    
    #setup plot
    plt.xlim = (np.mean(x)-75,np.mean(x)+75)
    plt.ylim = (np.mean(y)-75,np.mean(y)+75)
    plt.gca().set_aspect('equal', adjustable='datalim')
    plt.axis('off')

    
    #plot extra elements
    markers = ('v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd')
    colors = ['k','w']
    mcount,ccount = (0,0)
    for i in range(num_extra_elements):
        plt.scatter(draw_elementsx[i],draw_elementsy[i],marker=markers[mcount],c=colors[ccount],edgecolors='k')
        mcount+=1
        ccount +=1
        if mcount > len(markers)-1:
            mcount=0
        if ccount >1:
            ccount=0
    plt.show()
    plt.savefig(title)
    
makeplot(msp1x,msp1y,msp1vals,'MSP1_dev.png',sys.argv[1],sys.argv[2],sys.argv[3])
makeplot(msp2x,msp2y,msp2vals,'MSP2_dev.png',sys.argv[1],sys.argv[2],sys.argv[3])